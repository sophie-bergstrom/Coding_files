import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy import odr
matplotlib.rcParams['mathtext.fontset'] = 'stix'
matplotlib.rcParams['font.family'] = 'STIXGeneral'

mass = np.array([327, 426.7, 526.5, 626.3, 726.1, 825.8, 926.8, 1026.6, 1126.4, 1226.2, 1325.9, 1426.5, 1526.3, 1626.1, 1725.9, 1825.6, 1926.5, 2026.3, 2126.1, 2225.9, 2325.6, 2427.5, 2527.3, 2627.1, 2726.9, 2826.6, 2927.5, 3027.3, 3127.1, 3226.9, 3326.6, 3428.1, 3527.9, 3627.7, 3727.5, 3827.2, 3928.1, 4027.9, 4127.7, 4227.5, 4327.2, 4414.7, 4514.5, 4614.3, 4714.1, 4813.8, 4914.8, 5014.6, 5114.4, 5214.2, 5313.9, 5414.5, 5514.3, 5614.3, 5713.9, 5813.6, 5914.5, 6014.3, 6114.1, 6213.9, 6313.6])/1000 #kg Y AXIS

voltageratio = np.array([-0.0014, -0.0012, -0.0011, -0.00079, -0.00061, -0.00043, -0.00023, -0.000061, 0.00015, 0.00040, 0.00061, 0.00072, 0.00090, 0.0011, 0.0013, 0.0015, 0.0017, 0.0018, 0.0020, 0.0022, 0.0024, 0.0027, 0.0029, 0.0031, 0.0033, 0.0035, 0.0037, 0.0039, 0.0041, 0.0043, 0.0044, 0.0047, 0.0049, 0.0051, 0.0054, 0.0056, 0.0057, 0.0059, 0.0061, 0.0063, 0.0065, 0.0066, 0.0069, 0.0071, 0.0073, 0.0075, 0.0076, 0.0079, 0.0081, 0.0084, 0.0086, 0.0087, 0.0089, 0.0092, 0.0093, 0.0096, 0.0097, 0.010, 0.010, 0.010, 0.011]) # X AXIS

voltageratio_err = np.array([0.0002, 0.0002, 0.0002, 0.00002, 0.00002, 0.00002, 0.00002, 0.000002, 0.00002, 0.00002, 0.00002, 0.00002, 0.00002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.0002, 0.002, 0.002, 0.002, 0.002])

def func(voltageratio, A, B):
	return A*voltageratio + B

def rms(x, x_fit):
	return np.sqrt(np.sum((x-x_fit)**2))

init_vals = [1, 1]

popt, pcov = curve_fit(func, voltageratio, mass, init_vals)
print(f'The fit parameters for this function are: A = {popt[0]} and B = {popt[1]}')
error = np.sqrt(np.diag(pcov))
print(f'The uncertainties in the fit parameters are: A = {error[0]} and B = {error[1]}')
unweighted_fit = func(voltageratio, *popt)
unweighted_rms = rms(mass, unweighted_fit)
print(f'The rms error for the unweighted fit is {unweighted_rms}')

def func2(beta, voltageratio):
	A, B = beta
	return A*voltageratio + B

quad_model = odr.Model(func2)
data = odr.RealData(voltageratio, mass, sx = voltageratio_err)
myodr = odr.ODR(data, quad_model, beta0=init_vals)
out = myodr.run()
popt2 = out.beta
error2 = np.sqrt(np.diag(out.cov_beta))
print(f'The fit parameters are: A = {popt2[0]} and B = {popt2[1]}')
print(f'The uncertainties in the fit parameters are: A = {error2[0]} and B = {error2[1]}')
weighted_fit = func2(popt2, voltageratio)
weighted_rms = rms(mass, weighted_fit)
print(f'The rms error for the weighted fit is {weighted_rms}')

xSize = 14
ySize = 7
fontSize = 22
markerSize = 20
markerColor = 'k'
tickSize = 12
capSize=4
elineWidth=2

fig= plt.figure(figsize=(xSize, ySize))
ax = fig.add_subplot(111)
ax.errorbar(voltageratio, mass, xerr=voltageratio_err, color=markerColor, fmt='o', capsize=capSize, 
             elinewidth=elineWidth)
ax.plot(voltageratio, unweighted_fit, color='b', linewidth=1, label='Unweighted')
ax.plot(voltageratio, weighted_fit, color='r', linewidth=1, label='Weighted')
ax.set_xlabel('Voltage Ratio', fontsize=fontSize)
ax.set_ylabel('Mass (kg)', fontsize=fontSize)
ax.set_title('Load Cell Calibration Plot', fontsize=fontSize)
ax.legend(loc='upper left', fontsize=fontSize)
#fig.savefig("./solarcellcalibrationplot_experimental.jpg", bbox_inches='tight')
#ax.set_ylim([0, 7])
plt.grid()
plt.show()